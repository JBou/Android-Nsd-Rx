apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'

jacoco {
    toolVersion = '0.8.8'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

repositories {
    google()
    mavenCentral()
}

android {
    compileSdkVersion 33
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 33
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    namespace 'com.toxicbakery.library.nsd.rx'
    flavorDimensions "stream"
    productFlavors {
        rx {
            dimension "stream"
        }
        flow {
            dimension "stream"
        }
    }

    publishing {
        singleVariant("rxRelease") {
            withSourcesJar()
            withJavadocJar()
        }
        singleVariant("flowRelease") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    implementation "androidx.annotation:annotation:1.5.0"

    rxImplementation "io.reactivex.rxjava3:rxjava:3.1.5"

    flowImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"

    androidTestImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.4"
}

dokkaJavadoc.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
            includeNonPublic.set(false)
            skipEmptyPackages.set(true)
            outputDirectory.set(buildDir.resolve("javadoc"))
            sourceRoots.setFrom(file("src/main/java"))
        }
        named("rx") {
            noAndroidSdkLink.set(false)
            includeNonPublic.set(false)
            skipEmptyPackages.set(true)
            outputDirectory.set(buildDir.resolve("javadoc"))
            sourceRoots.setFrom(file("src/rx/java"))
        }
        named("flow") {
            noAndroidSdkLink.set(false)
            includeNonPublic.set(false)
            skipEmptyPackages.set(true)
            outputDirectory.set(buildDir.resolve("javadoc"))
            sourceRoots.setFrom(file("src/flow/java"))
        }
    }
}

task jacocoUnitTestReport(type: JacocoReport, group: 'verification', dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.getRequired().set(true)
        html.getRequired().set(true)
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

task jacocoFullTestReport(type: JacocoReport, group: 'verification', dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.getRequired().set(true)
        html.getRequired().set(true)
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

task copyAndroidCoverage(type: Copy) {
    /*afterEvaluate {
        dependsOn jacocoFullTestReport
    }*/
    from 'build/reports/jacoco/jacocoFullTestReport/jacocoFullTestReport.xml'
    into './'
    rename { String fileName ->
        fileName = "integration.xml"
    }
}

static String getTagName() { return System.getenv('CIRCLE_TAG') ?: "" }
boolean isSnapshot() { return version.contains("SNAPSHOT") }
static boolean isTag() { return !getTagName().isEmpty() }
static boolean isCircle() { return System.getenv('CIRCLECI') ? true : false }
static String getRepositoryUsername() { return System.getenv('SONATYPE_USERNAME') ?: "" }
static String getRepositoryPassword() { return System.getenv('SONATYPE_PASSWORD') ?: "" }
static String getBranchName() { return System.getenv('CIRCLE_BRANCH') }
boolean isRelease() { return isTag() && !isSnapshot() }

afterEvaluate { project ->
    println "Tag ${getTagName()}"
    println "Branch ${getBranchName()}"
    println "Is Release ${isRelease()}"
    println "Is Circle ${isCircle()}"
    println "Has Username ${!getRepositoryUsername().empty}"
    println "Has Password ${!getRepositoryPassword().empty}"
    println "Version ${version}"

    publishing {
        publications {
            mavenRx(MavenPublication) {
                from components.rxRelease

                artifactId = "android-nsd-rx"

                pom {
                    name = "android-nsd-rx"
                    packaging = POM_PACKAGING
                    description = "Android Network Service Discovery Rx"
                    url = POM_URL

                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                            organization = POM_DEVELOPER_ORGANIZATION
                            organizationUrl = POM_DEVELOPER_ORGANIZATION_URL
                        }
                    }
                }
            }
            mavenFlow(MavenPublication) {
                from components.flowRelease

                artifactId = "android-nsd-flow"

                pom {
                    name = "android-nsd-flow"
                    packaging = POM_PACKAGING
                    description = "Android Network Service Discovery Flow"
                    url = POM_URL

                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                            organization = POM_DEVELOPER_ORGANIZATION
                            organizationUrl = POM_DEVELOPER_ORGANIZATION_URL
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                def releaseRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepositoryUrl = isCircle() ? "https://oss.sonatype.org/content/repositories/snapshots" : mavenLocal().url
                url = isRelease() ? releaseRepositoryUrl : snapshotRepositoryUrl

                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }

    signing {
        required false
        sign publishing.publications.mavenFlow, publishing.publications.mavenRx
    }
}
